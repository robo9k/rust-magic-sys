name: setup-libmagic
description: Setup some version of `libmagic` for `magic-sys`

inputs:
  linkage:
    description: 'How to link (against `libmagic`): "static" / "dynamic"'
    default: static

outputs:
  libmagic-version:
    description: 'Version of the setup `libmagic` library, e.g. 5.39'
    value: ${{ steps.libmagic-version.outputs.version }}

  crate-features:
    description: 'Crate features for `magic-sys` required for this `libmagic` setup'
    value: ${{ steps.crate-features.outputs.features }}

runs:
  using: 'composite'
  steps:
    # check inputs
    - name: check inputs
      run: |
        if [[ ! ("${INPUT_LINKAGE}" == "static" || "${INPUT_LINKAGE}" == "dynamic") ]]; then
          echo "'linkage' input must be either 'static' or 'dynamic' but it is: ${INPUT_LINKAGE}"
          exit 1
        fi
      shell: bash
      env:
        INPUT_LINKAGE: ${{ inputs.linkage }}


    # setup environment

    - name: setup environment
      id: build-environment
      run: |
        case '${{ runner.os }}' in
          'Linux')
            echo 'VCPKGRS_NO_LIBMAGIC=1' >> "${GITHUB_ENV}"
            echo 'features=pkg-config' >> "${GITHUB_OUTPUT}"
          ;;
          'Windows')
            echo 'LIBMAGIC_NO_PKG_CONFIG=1' >> "${GITHUB_ENV}"
            echo 'features=vcpkg' >> "${GITHUB_OUTPUT}"
          ;;
          'macOS')
            echo 'VCPKGRS_NO_LIBMAGIC=1' >> "${GITHUB_ENV}"
            echo 'features=pkg-config' >> "${GITHUB_OUTPUT}"
          ;;
        esac
      shell: bash


    # setup linkage

    - name: setup linkage
      if: ${{ runner.os == 'Linux' }}
      run: |
        if [[ "${INPUT_LINKAGE}" == "static" ]]; then
          echo "LIBMAGIC_STATIC=1" >> "${GITHUB_ENV}"
        elif [[ "${INPUT_LINKAGE}" == "dynamic" ]]; then
          echo "LIBMAGIC_DYNAMIC=1" >> "${GITHUB_ENV}"
        fi
      shell: bash
      env:
        INPUT_LINKAGE: ${{ inputs.linkage }}

    - name: setup linkage
      if: ${{ runner.os == 'Windows' }}
      run: |
        if [[ "${INPUT_LINKAGE}" == "static" ]]; then
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static-md" >> "${GITHUB_ENV}"
        elif [[ "${INPUT_LINKAGE}" == "dynamic" ]]; then
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> "${GITHUB_ENV}"
          echo "VCPKGRS_DYNAMIC=1" >> "${GITHUB_ENV}"
        fi
      shell: bash
      env:
        INPUT_LINKAGE: ${{ inputs.linkage }}

    - name: setup linkage
      if: ${{ runner.os == 'macOS' }}
      run: |
        if [[ "${INPUT_LINKAGE}" == "static" ]]; then
          echo "LIBMAGIC_STATIC=1" >> "${GITHUB_ENV}"
        elif [[ "${INPUT_LINKAGE}" == "dynamic" ]]; then
          echo "LIBMAGIC_DYNAMIC=1" >> "${GITHUB_ENV}"
        fi
      shell: bash
      env:
        INPUT_LINKAGE: ${{ inputs.linkage }}


    # update packages

    - name: update packages
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt-get update
      shell: bash

    - name: update packages
      if: ${{ runner.os == 'Windows' }}
      run: |
        git -C "${VCPKG_INSTALLATION_ROOT}" pull
        vcpkg update
      shell: bash

    - name: update packages
      if: ${{ runner.os == 'macOS' }}
      run: brew update
      shell: bash


    # install packages

    - name: install packages
      if: ${{ runner.os == 'Linux' }}
      run: |
        . /etc/os-release

        if [ "${VERSION_ID}" = "22.04" ] ; then
          sudo apt-get install libmagic1 libmagic-dev pkgconf
        elif [ "${VERSION_ID}" = "24.04" ] ; then
          sudo apt-get install libmagic1 libmagic-dev pkg-config
        fi
      shell: bash
    - name: install additional packages
      if: ${{ runner.os == 'Linux' && inputs.linkage == 'static' }}
      run: |
        . /etc/os-release

        if [ "${VERSION_ID}" = "22.04" ] ; then
          sudo apt-get install libbz2-dev liblzma-dev zlib1g-dev
        elif [ "${VERSION_ID}" = "24.04" ] ; then
          sudo apt-get install --no-install-recommends libbz2-dev liblzma-dev zlib1g-dev
        fi
      shell: bash

    - name: install packages
      if: ${{ runner.os == 'Windows' }}
      # see https://github.com/robo9k/rust-magic-sys/pull/59 for not using VCPKG_INSTALLATION_ROOT
      run: |
        vcpkg install libmagic
        echo "VCPKG_INSTALLATION_ROOT: ${VCPKG_INSTALLATION_ROOT}"
        echo "VCPKG_ROOT=C:\vcpkg" >> "${GITHUB_ENV}"
      shell: bash

    - name: install packages
      if: ${{ runner.os == 'macOS' }}
      run: brew install libmagic pkgconf
      shell: bash


    # determine libmagic version

    - name: determine libmagic version
      id: libmagic-version
      run: |
        case '${{ runner.os }}' in
          'Linux')
            modversion=$(pkg-config --modversion libmagic)
          ;;
          'Windows')
            VCPKG_TRIPLET=x64-windows
            VCPKG_DEFAULT_TRIPLET="${VCPKG_TRIPLET}" vcpkg install --no-print-usage pkgconf
            PKG_CONFIG="${VCPKG_INSTALLATION_ROOT}\\installed\\${VCPKG_TRIPLET}\\tools\\pkgconf\\pkgconf.exe"
            modversion=$(PKG_CONFIG_PATH="${VCPKG_INSTALLATION_ROOT}\\installed\\${VCPKG_TRIPLET}\\lib\\pkgconfig\\" "${PKG_CONFIG}" --modversion libmagic)
          ;;
          'macOS')
            modversion=$(pkg-config --modversion libmagic)
          ;;
        esac

        echo "libmagic version: ${modversion}"
        echo "version=${modversion}" >> "${GITHUB_OUTPUT}"
      shell: bash


    # determine crate features

    - name: determine crate features
      id: crate-features
      run: |
        version_feature=$(./.github/libmagic-version-to-crate-feature.sh "${LIBMAGIC_VERSION}")
        features="${BUILD_FEATURES} ${version_feature}"

        echo "required 'magic-sys' crate features: ${features}"
        echo "features=${features}" >> "${GITHUB_OUTPUT}"
      env:
        LIBMAGIC_VERSION: ${{ steps.libmagic-version.outputs.version }}
        BUILD_FEATURES: ${{ steps.build-environment.outputs.features }}
      shell: bash
