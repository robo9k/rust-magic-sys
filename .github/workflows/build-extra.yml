name: "build-extra"

permissions: {}

on:
  # run on default branch to store caches
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-extra:
    name: "cargo build [dynamic]"
    permissions:
      contents: read
    strategy:
      matrix:
        runner: [ubuntu-24.04, ubuntu-22.04, windows-2025, windows-2022, macos-15, macos-14, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          persist-credentials: false

      - uses: ./.github/actions/setup-libmagic
        with:
          linkage: dynamic

      - id: toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # doesn't have usual versioned releases/tags
        with:
          toolchain: "1.54.0" # hardcoded crate MSRV, see rust-toolchain.toml etc.
          # minimal profile includes rustc component which includes cargo and rustdoc

      - uses: rui314/setup-mold@702b1908b5edf30d71a8d1666b724e0f0c6fa035 # does not have recent tags

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0 

      - run: cargo +${{ steps.toolchain.outputs.name }} build --all-targets --all-features --verbose

  test-extra:
    name: "cargo test [dynamic]"
    permissions:
      contents: read
    strategy:
      matrix:
        runner: [ubuntu-24.04, ubuntu-22.04, windows-2025, windows-2022, macos-15, macos-14, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          persist-credentials: false

      - uses: ./.github/actions/setup-libmagic
        with:
          linkage: dynamic

      - id: toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # doesn't have usual versioned releases/tags
        with:
          toolchain: "1.54.0" # hardcoded crate MSRV, see rust-toolchain.toml etc.
          # minimal profile includes rustc component which includes cargo and rustdoc

      - uses: rui314/setup-mold@702b1908b5edf30d71a8d1666b724e0f0c6fa035 # does not have recent tags

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0 

      - run: cargo +${{ steps.toolchain.outputs.name }} test --all-targets --all-features --verbose

  cargo-vcpkg-extra:
    name: "cargo vcpkg && cargo test"
    permissions:
      contents: read
    runs-on: windows-latest
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          persist-credentials: false

      - id: toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # doesn't have usual versioned releases/tags
        with:
          toolchain: "1.54.0" # hardcoded crate MSRV, see rust-toolchain.toml etc.
          # minimal profile includes rustc component which includes cargo and rustdoc

      - uses: rui314/setup-mold@702b1908b5edf30d71a8d1666b724e0f0c6fa035 # does not have recent tags

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - uses: taiki-e/install-action@ebb475ef6e41abb770588020cd8c6ca3503cb868 # v2.19.4
        with:
          tool: cargo-vcpkg@0.1.7

      - name: expose cache
        if: ${{ runner.os == 'Windows' }}
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: setup cache
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> "${GITHUB_ENV}"
        shell: bash

      - run: cargo +${{ steps.toolchain.outputs.name }} vcpkg --verbose build

      - run: cargo +${{ steps.toolchain.outputs.name }} test --all-targets --all-features --verbose
