name: "build"

permissions: {}

on:
  # run on default branch to store caches
  push:
    branches: [ main ]
  pull_request:

env:
  RUSTFLAGS: "-Dwarnings"
  CARGO_INCREMENTAL: "false"
  CARGO_PROFILE_TEST_DEBUG: "none"
  CARGO_TERM_VERBOSE: "true"
  CARGO_TERM_COLOR: "always"

defaults:
  run:
    shell: bash

jobs:
  build-and-test:
    name: "cargo build && cargo test"
    permissions:
      contents: read
    strategy:
      matrix:
        runner: [ubuntu-24.04, ubuntu-22.04, windows-2025, windows-2022, macos-15, macos-14, macos-13]
        libmagic-linkage: [static, dynamic]
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      # disable vcpkg default binary cache
      - if: ${{ runner.os == 'Windows' }}
        run: echo "VCPKG_BINARY_SOURCES=clear" >> "${GITHUB_ENV}"

      - id: setup-libmagic
        uses: ./.github/actions/setup-libmagic
        with:
          linkage: ${{ matrix.libmagic-linkage }}

      - id: toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # doesn't have usual versioned releases/tags
        with:
          toolchain: "1.88.0" # current pinned stable
          # minimal profile includes rustc component which includes cargo and rustdoc

      - run: echo "RUSTUP_TOOLCHAIN=${RUSTUP_TOOLCHAIN}" >> "${GITHUB_ENV}"
        env:
          RUSTUP_TOOLCHAIN: ${{ steps.toolchain.outputs.name }}

      - uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # does not have recent tags

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0 

      - run: cargo --verbose --version
      - run: cargo build --verbose --verbose --locked --all-targets --no-default-features --features "${FEATURES}"
        env:
          FEATURES: ${{ steps.setup-libmagic.outputs.crate-features }}
      - run: cargo test --locked --all-targets --no-default-features --features "${FEATURES}"
        env:
          FEATURES: ${{ steps.setup-libmagic.outputs.crate-features }}

  cargo-vcpkg-and-build-and-test:
    name: "cargo vcpkg build && cargo build && cargo test"
    permissions:
      contents: read
    strategy:
      matrix:
        runner: [windows-2025, windows-2022]
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - id: toolchain
        uses: dtolnay/rust-toolchain@e97e2d8cc328f1b50210efc529dca0028893a2d9 # doesn't have usual versioned releases/tags
        with:
          toolchain: "1.88.0" # current pinned stable
          # minimal profile includes rustc component which includes cargo and rustdoc

      - run: echo "RUSTUP_TOOLCHAIN=${RUSTUP_TOOLCHAIN}" >> "${GITHUB_ENV}"
        env:
          RUSTUP_TOOLCHAIN: ${{ steps.toolchain.outputs.name }}

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0 

      - uses: taiki-e/install-action@36ef4183e0fbb22f4d6044d1d1f8701c3bd07716 # v2.59.0
        with:
          # renovate: taiki-e/install-action
          tool: cargo-vcpkg@0.1.7

      # disable vcpkg default binary cache
      - run: echo "VCPKG_BINARY_SOURCES=clear" >> "${GITHUB_ENV}"

      - id: cache-key
        if: ${{ runner.os == 'Windows' }}
        run: |
          vcpkg_rev=$(cargo metadata --format-version 1 --no-deps | jq --raw-output '.packages[] | select(.name == "magic-sys").metadata.vcpkg.rev')
          cache_key="cargo-vcpkg-${vcpkg_rev}-windows-libmagic+pkgconf"

          echo "key=${cache_key}" >> "${GITHUB_OUTPUT}"

      - uses: ./.github/actions/vcpkg-files-cache
        with:
          cache-key: ${{ steps.cache-key.outputs.key }}

      - run: cargo --verbose --version

      - run: cargo vcpkg --verbose build
      - run: echo "LIBMAGIC_NO_PKG_CONFIG=true" >> "${GITHUB_ENV}"

      - id: libmagic-version
        run: |
          VCPKG_INSTALLATION_ROOT="${{ github.workspace }}\\target\\vcpkg"
          VCPKG="${VCPKG_INSTALLATION_ROOT}\\vcpkg.exe"
          VCPKG_TRIPLET=x64-windows
          VCPKG_DEFAULT_TRIPLET="${VCPKG_TRIPLET}" "${VCPKG}" install --vcpkg-root "${VCPKG_INSTALLATION_ROOT}" --no-print-usage pkgconf
          PKG_CONFIG="${VCPKG_INSTALLATION_ROOT}\\installed\\${VCPKG_TRIPLET}\\tools\\pkgconf\\pkgconf.exe"
          modversion=$(PKG_CONFIG_PATH="${VCPKG_INSTALLATION_ROOT}\\installed\\${VCPKG_TRIPLET}\\lib\\pkgconfig\\" "${PKG_CONFIG}" --modversion libmagic)

          echo "libmagic version: ${modversion}"
          echo "version=${modversion}" >> "${GITHUB_OUTPUT}"

      - id: crate-features
        run: |
          version_feature=$(./.github/libmagic-version-to-crate-feature.sh "${LIBMAGIC_VERSION}")
          features="vcpkg ${version_feature}"

          echo "required 'magic-sys' crate features: ${features}"
          echo "crate-features=${features}" >> "${GITHUB_OUTPUT}"
        env:
          LIBMAGIC_VERSION: ${{ steps.libmagic-version.outputs.version }}

      - run: cargo build --verbose --verbose --locked --all-targets --no-default-features --features "${FEATURES}"
        env:
          FEATURES: ${{ steps.crate-features.outputs.crate-features }}
      - run: cargo test --locked --all-targets --no-default-features --features "${FEATURES}"
        env:
          FEATURES: ${{ steps.crate-features.outputs.crate-features }}
